generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Contact {
  id                  String    @id @default(cuid())
  email               String    @unique
  name                String
  country             String?
  ipAddress           String?
  location            String?
  whatsapp            String?
  message             String?
  deviceType          String?
  oneYearSubscription Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt

  formResponses FormResponse[]
  users         User[]         @relation("UserContacts")
  tags          Tag[]          @relation("ContactTags")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String?
  pseudo        String?   @unique
  description   String?
  image         String?
  banner        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?

  accounts    Account[]
  socialLinks SocialLink[]
  blocs       Bloc[]
  contacts    Contact[]    @relation("UserContacts")
  tags        Tag[]        @relation("UserTags")
  forms       Form[]
  Asset       Asset[]
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  users    User[]    @relation("UserTags")
  contacts Contact[] @relation("ContactTags")
  forms    Form[]
}

model Form {
  id        String   @id @default(cuid())
  name      String
  fields    Field[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Field {
  id        String    @id @default(cuid())
  name      String
  type      FieldType
  required  Boolean   @default(false)
  formId    String
  form      Form      @relation(fields: [formId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  formResponses FormResponse[]
}

model FormResponse {
  id        String   @id @default(cuid())
  value     String
  createdAt DateTime @default(now())

  contact   Contact @relation(fields: [contactId], references: [id])
  contactId String

  field   Field  @relation(fields: [fieldId], references: [id])
  fieldId String
}

enum FieldType {
  TEXT
  EMAIL
  NUMBER
  DATE
  SELECT
  RADIO
  CHECKBOX
}

model SocialLink {
  id        String    @id @default(cuid())
  name      String
  url       String
  userId    String
  isActive  Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, name])
}

enum SubBlocType {
  URL
  IMAGE
  DOCUMENT
  PRODUCT
  VIDEO
}

model Bloc {
  id        String  @id @default(cuid())
  name      String
  userId    String
  isDisplay Boolean @default(true)

  user      User      @relation(fields: [userId], references: [id])
  subBlocs  SubBloc[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model SubBloc {
  id          String      @id @default(cuid())
  type        SubBlocType
  title       String
  description String
  isPrivate   Boolean     @default(false)
  isDisplay   Boolean     @default(true)
  isPaid      Boolean     @default(false)
  visitCount  Int         @default(0)
  blocId      String
  bloc        Bloc        @relation(fields: [blocId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Common fields for all types
  url String?

  // Fields for IMAGE type
  imageUrl String?
  altText  String?
  price    Decimal?

  // Fields for DOCUMENT type
  documentUrl String?
  fileType    String?
  fileSize    Int?

  // Fields for VIDEO type
  videoUrl     String?
  thumbnailUrl String?
  duration     Int?
  embedCode    String?
  actionType   VideoActionType?
  actionFormId String?
  actionUrl    String?
}

enum VideoActionType {
  URL
  FORM
}

model Asset {
  id        String   @id @default(cuid())
  userId    String
  fileName  String
  fileType  String
  fileSize  Int
  s3Key     String
  s3Url     String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  profile_name      String? // Ajoutez ce champ pour le nom
  profile_picture   String? // Ajoutez ce champ pour l'image

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}
