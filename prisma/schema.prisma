generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}
model Contact {
  id       String   @id @default(cuid())
  email    String   @unique
  name     String
  country  String?
  ipAdress String?
  location String?

  users    User[]   @relation("UserContacts")
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String?
  pseudo        String?    @unique
  description   String?
  image         String?
  banner        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?

  accounts      Account[]
  socialLinks   SocialLink[]
  categories    Category[]

  contacts      Contact[] @relation("UserContacts")
}

model SocialLink {
  id        String    @id @default(cuid())
  icon      String
  url       String
  color     String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  blocks    Block[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Block {
  id          String   @id @default(cuid())
  title       String
  description String
  link        String
  image       String
  visitCount  Int      @default(0)
  isPrivate   Boolean  @default(false)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  profile_name      String? // Ajoutez ce champ pour le nom
  profile_picture   String? // Ajoutez ce champ pour l'image

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}
