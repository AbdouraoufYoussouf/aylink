generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Contact {
  id       String  @id @default(cuid())
  email    String  @unique
  name     String
  country  String?
  ipAdress String?
  location String?

  users     User[]    @relation("UserContacts")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String?
  pseudo        String?   @unique
  description   String?
  image         String?
  banner        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?

  accounts    Account[]
  socialLinks SocialLink[]
  blocs       Bloc[]

  contacts Contact[] @relation("UserContacts")
}

model SocialLink {
  id        String    @id @default(cuid())
  name      String
  url       String
  userId    String
  isActive  Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, name])
}

enum SubBlocType {
  URL
  IMAGE
  DOCUMENT
  VIDEO
}

model Bloc {
  id        String     @id @default(cuid())
  name      String
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  subBlocks SubBlock[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
}

model SubBlock {
  id          String      @id @default(cuid())
  type        SubBlocType
  title       String
  description String
  isPrivate   Boolean     @default(false)
  isDisplay   Boolean     @default(true)
  isPaid      Boolean     @default(false)
  visitCount  Int         @default(0)
  blocId      String
  bloc        Bloc        @relation(fields: [blocId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Common fields for all types
  url         String?

  // Fields for IMAGE type
  imageUrl    String?
  altText     String?

  // Fields for DOCUMENT type
  documentUrl String?
  fileType    String?
  fileSize    Int?

  // Fields for VIDEO type
  videoUrl     String?
  thumbnailUrl String?
  duration     Int?
  embedCode    String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  profile_name      String? // Ajoutez ce champ pour le nom
  profile_picture   String? // Ajoutez ce champ pour l'image

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}
